// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  coverImage      String?
  profileImage    String?
  hashedPassword  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  friends         String[] @db.ObjectId
  hasNotification Boolean?
  socialId      Int?
  twitter      String?
  instagram      String?
  dribbble      String?
  linkedin      String?
  location      String?
  occupation    String?
  viewedProfile      Int?
  impressions      Int?

  posts         Post[]
  notifications Notification[]
}

model Post {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  description        String?
  createdAt          DateTime @default(now())
  hashtag            String?
  updatedAt          DateTime @updatedAt
  userId             String @db.ObjectId
  likes              String[] @db.ObjectId
  postImage          String?
  location           String?
  comments           Json[]
  creatorsImage      String?
  occupation         String?
  creatorsProfileImage  String?
  name               String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

}

// model Like {
//   id                 String @id @default(auto()) @map("_id") @db.ObjectId
//   userId             String @db.ObjectId
//   postId             String @db.ObjectId
//   isLiked            Boolean
//   createdAt          DateTime @default(now())
//   updatedAt          DateTime @updatedAt

//   post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
// }


// model Comment {
//   id                 String @id @default(auto()) @map("_id") @db.ObjectId
//   body               String
//   createdAt          DateTime @default(now())
//   updatedAt          DateTime @updatedAt
//   userId             String @db.ObjectId
//   postId             String @db.ObjectId

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
//   post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
// }

model Notification {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  body               String
  userId             String @db.ObjectId
  createdAt          DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
